package main

import (
	// "context"
	// "crypto/rsa"
	// "crypto/tls"
	// "crypto/x509"
	"fmt"
	"net/http"
	// "net/url"
	// "github.com/crewjam/saml/samlsp"
)

// func hello(w http.ResponseWriter, r *http.Request) {
// 	fmt.Fprintf(w, "Hello, %s!", samlsp.AttributeFromContext(r.Context(), "displayName"))
// }

func gen(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello, World!")
}

func main() {
	// keyPair, err := tls.LoadX509KeyPair("idp.example.com.crt", "idp.example.com.pem")
	// if err != nil {
	// 	panic(err) // TODO handle error
	// }
	// keyPair.Leaf, err = x509.ParseCertificate(keyPair.Certificate[0])
	// if err != nil {
	// 	panic(err) // TODO handle error
	// }

	// idpMetadataURL, err := url.Parse("https://example.com/saml/metadata")
	// if err != nil {
	// 	panic(err) // TODO handle error
	// }

	// idpMetadata, err := samlsp.FetchMetadata(context.Background(), http.DefaultClient,
	// 	*idpMetadataURL)
	// if err != nil {
	// 	panic(err) // TODO handle error
	// }

	// rootURL, err := url.Parse("http://localhost:8000")
	// if err != nil {
	// 	panic(err) // TODO handle error
	// }

	// samlSP, _ := samlsp.New(samlsp.Options{
	// 	URL:         *rootURL,
	// 	Key:         keyPair.PrivateKey.(*rsa.PrivateKey),
	// 	Certificate: keyPair.Leaf,
	// 	IDPMetadata: idpMetadata,
	// })
	// app := http.HandlerFunc(hello)
	gen := http.HandlerFunc(gen)
	http.Handle("/", gen)
	// http.Handle("/hello", samlSP.RequireAccount(app))
	// http.Handle("/saml/", samlSP)
	http.ListenAndServe(":8000", nil)
}
